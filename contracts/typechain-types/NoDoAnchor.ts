/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace NoDoAnchor {
  export type VoteStruct = {
    root: BytesLike;
    nullifierHash: BigNumberish;
    signalHash: BigNumberish;
    externalNullifier: BigNumberish;
    voter: AddressLike;
    blockNumber: BigNumberish;
    timestamp: BigNumberish;
  };

  export type VoteStructOutput = [
    root: string,
    nullifierHash: bigint,
    signalHash: bigint,
    externalNullifier: bigint,
    voter: string,
    blockNumber: bigint,
    timestamp: bigint
  ] & {
    root: string;
    nullifierHash: bigint;
    signalHash: bigint;
    externalNullifier: bigint;
    voter: string;
    blockNumber: bigint;
    timestamp: bigint;
  };
}

export interface NoDoAnchorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "anchor"
      | "getPollVoteCount"
      | "getPollVotes"
      | "isNullifierUsed"
      | "owner"
      | "pollVotes"
      | "setVerifier"
      | "transferOwnership"
      | "usedNullifiers"
      | "verifier"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "VerifierUpdated"
      | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "anchor",
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPollVoteCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPollVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isNullifierUsed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pollVotes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usedNullifiers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;

  decodeFunctionResult(functionFragment: "anchor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPollVoteCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPollVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNullifierUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pollVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usedNullifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [oldOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [oldOwner: string, newOwner: string];
  export interface OutputObject {
    oldOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifierUpdatedEvent {
  export type InputTuple = [oldVerifier: AddressLike, newVerifier: AddressLike];
  export type OutputTuple = [oldVerifier: string, newVerifier: string];
  export interface OutputObject {
    oldVerifier: string;
    newVerifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    externalNullifier: BigNumberish,
    nullifierHash: BigNumberish,
    root: BytesLike,
    signalHash: BigNumberish,
    voter: AddressLike
  ];
  export type OutputTuple = [
    externalNullifier: bigint,
    nullifierHash: bigint,
    root: string,
    signalHash: bigint,
    voter: string
  ];
  export interface OutputObject {
    externalNullifier: bigint;
    nullifierHash: bigint;
    root: string;
    signalHash: bigint;
    voter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NoDoAnchor extends BaseContract {
  connect(runner?: ContractRunner | null): NoDoAnchor;
  waitForDeployment(): Promise<this>;

  interface: NoDoAnchorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  anchor: TypedContractMethod<
    [
      proof_a: [BigNumberish, BigNumberish],
      proof_b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      proof_c: [BigNumberish, BigNumberish],
      root: BytesLike,
      nullifierHash: BigNumberish,
      signalHash: BigNumberish,
      externalNullifier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getPollVoteCount: TypedContractMethod<
    [externalNullifier: BigNumberish],
    [bigint],
    "view"
  >;

  getPollVotes: TypedContractMethod<
    [externalNullifier: BigNumberish],
    [NoDoAnchor.VoteStructOutput[]],
    "view"
  >;

  isNullifierUsed: TypedContractMethod<
    [nullifierHash: BigNumberish],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pollVotes: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, bigint, bigint, bigint, string, bigint, bigint] & {
        root: string;
        nullifierHash: bigint;
        signalHash: bigint;
        externalNullifier: bigint;
        voter: string;
        blockNumber: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  setVerifier: TypedContractMethod<
    [_verifier: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  usedNullifiers: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  verifier: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "anchor"
  ): TypedContractMethod<
    [
      proof_a: [BigNumberish, BigNumberish],
      proof_b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      proof_c: [BigNumberish, BigNumberish],
      root: BytesLike,
      nullifierHash: BigNumberish,
      signalHash: BigNumberish,
      externalNullifier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPollVoteCount"
  ): TypedContractMethod<[externalNullifier: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPollVotes"
  ): TypedContractMethod<
    [externalNullifier: BigNumberish],
    [NoDoAnchor.VoteStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isNullifierUsed"
  ): TypedContractMethod<[nullifierHash: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pollVotes"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, bigint, bigint, bigint, string, bigint, bigint] & {
        root: string;
        nullifierHash: bigint;
        signalHash: bigint;
        externalNullifier: bigint;
        voter: string;
        blockNumber: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setVerifier"
  ): TypedContractMethod<[_verifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usedNullifiers"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifier"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "VerifierUpdated"
  ): TypedContractEvent<
    VerifierUpdatedEvent.InputTuple,
    VerifierUpdatedEvent.OutputTuple,
    VerifierUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "VerifierUpdated(address,address)": TypedContractEvent<
      VerifierUpdatedEvent.InputTuple,
      VerifierUpdatedEvent.OutputTuple,
      VerifierUpdatedEvent.OutputObject
    >;
    VerifierUpdated: TypedContractEvent<
      VerifierUpdatedEvent.InputTuple,
      VerifierUpdatedEvent.OutputTuple,
      VerifierUpdatedEvent.OutputObject
    >;

    "VoteCast(uint256,uint256,bytes32,uint256,address)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
